import React, {FC, useCallback, useEffect, useRef} from "react";
import {useSelector} from "react-redux";
import qs from "qs";
import Categories from "../components/Categories";
import SortPopup, {sortList} from "../components/Sort";
import Skeleton from "../components/PizzaBlock/Skeleton";
import Pagination from "../components/Pagination/Pagination";
import {
    selectFilter,
    setCategoryId,
    setCurrentPage,
    setFilters
} from "../redux/slices/filterSlice";
import {useNavigate} from "react-router-dom";
import {
    fetchPizzas,
    SearchPizzaParams,
    selectPizzaData
} from "../redux/slices/pizzasSlice";
import PizzaBlock from "../components/PizzaBlock";
import {useAppDispatch} from "../redux/store";


const Home: FC = () => {
    const navigate = useNavigate();// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useNavigate –¥–ª—è –∑–º—ñ–Ω–∏ URL –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    const dispatch = useAppDispatch();// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useDispatch –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –µ–∫—à–µ–Ω—ñ–≤ –≤ Redux
    const isSearch = useRef(false);// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useRef –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó, —è–∫–∞ –Ω–µ –∑–º—ñ–Ω—é—î —Å–≤–æ—î –∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–∂ —Ä–µ–Ω–¥–µ—Ä–∞–º–∏
    const isMounted = useRef(false);// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–µ—Ä—à–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞


    const {
        categoryId,
        sort,
        currentPage,
        searchValue
    } = useSelector(selectFilter);// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useSelector –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Redux: –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —Ç–∏–ø —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫
    const {items, status} = useSelector(selectPizzaData)

    const onChangeCategory = useCallback((id: number) => { // –ó–º—ñ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –µ–∫—à–µ–Ω setCategoryId –∑ –Ω–æ–≤–∏–º id –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        dispatch(setCategoryId(id));
    }, [])

    const onChangePage = (page: number) => { // –ó–º—ñ–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –µ–∫—à–µ–Ω setCurrentPage –∑ –Ω–æ–≤–∏–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        dispatch(setCurrentPage(page));

    };


    const getPizzas = async () => {
        const category = categoryId > 0 ? `category=${categoryId}` : '';// –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –±—ñ–ª—å—à–µ –Ω—É–ª—è, –¥–æ–¥–∞—î–º–æ —ó—ó –≤ URL –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        const sortBy = `&sortBy=${sort.sortProperty}`;// –§–æ—Ä–º—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É URL –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –ø–µ–≤–Ω–æ—é –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é
        const search = searchValue ? `&title=*${searchValue}*` : '';// –î–æ–¥–∞—î–º–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç —É URL, —è–∫—â–æ —î –≤–≤–µ–¥–µ–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π —Ç–µ—Ä–º—ñ–Ω

        dispatch(
            fetchPizzas({
                category,
                sortBy,
                search,
                currentPage: String(currentPage)
            }));
    };


    useEffect(() => {
        if (!window.location.search) {
            getPizzas()
        }
    }, []);

    useEffect(() => {// –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1)) as unknown as SearchPizzaParams;// –Ø–∫—â–æ –≤ URL —î —Ä—è–¥–æ–∫ –ø–æ—à—É–∫—É, —Ä–æ–∑–±–∏—Ä–∞—î–º–æ –π–æ–≥–æ –≤ –æ–±'—î–∫—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é qs.parse
            const sort = sortList.find((obj) => obj.sortProperty === params.sortBy);

            dispatch(setFilters({
                searchValue: params.search,
                categoryId: Number(params.category),
                currentPage: Number(params.currentPage),
                sort: sort || sortList[0],
            }));
            isSearch.current = true;
        }
    }, []);

    useEffect(() => {// –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: sort.sortProperty,
                categoryId,
                currentPage,
            });// –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –∑–∞–ø–∏—Ç—É (query string) –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            navigate(`/?${queryString}`);// –û–Ω–æ–≤–ª—é—î–º–æ URL –∑ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        }
        isMounted.current = true;
    }, [categoryId, sort.sortProperty, currentPage]);

    useEffect(() => {// –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–±–æ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
        if (!isSearch.current) {
            getPizzas();

        }
        isSearch.current = false;
    }, [categoryId, sort.sortProperty, currentPage, searchValue]);

    const pizzas = items.map((obj: any) => <PizzaBlock key={obj.id} {...obj} />)// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç PizzaBlock –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—ñ—Ü–∏ –∑—ñ —Å–ø–∏—Å–∫—É items
    const skeletons = [...new Array(5)].map((_, index) => <Skeleton
        key={index}/>) // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ Skeleton –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (5 —à—Ç—É–∫)
    return (
        <>
            <div className="container">
                <div className="content__top">
                    <Categories value={categoryId}
                                onChangeCategory={onChangeCategory}/>
                    <SortPopup/>
                </div>
                <h2 className="content__title">–í—Å—ñ –ø—ñ—Ü–∏</h2>

                {status === 'error' ? (
                    <div className="content__error-info">
                        <h2>–í–∏–Ω–∏–∫–ª–æ –Ω–µ–¥–æ—Ä–æ–∑—É–º—ñ–Ω–Ω—è –≤—Å—ñ –ø—ñ—Ü–∏ –∑—ó–≤ –í–ª–∞–¥ üòï</h2>
                        <p>–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ—Ü–∫–∏</p>
                    </div>
                ) : (
                    <div
                        className="content__items">{status === "loading" ? skeletons : pizzas}</div>
                )}


                <Pagination currentPage={currentPage}
                            onChangePage={onChangePage}/>
            </div>
        </>
    );
};

export default Home;


// .filter((obj) => {//–ø–æ—à—É–∫
//     if (obj.title.toLowerCase().includes(searchValue.toLowerCase())) {
//         return true
//     }
//     return false
// })
